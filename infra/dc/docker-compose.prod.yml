

version: "3"


networks:
  private-nw:

volumes: 
  db:
  redis:

services:
  

  app:

    extends:
      file: ./docker-compose.base.yml
      service: nginx
    ports:
      - "8080:80"
    volumes:
      - ./wannapplay:/var/www/html:delegated
    depends_on:
      - db

  node:
    build:
      context: ${ROOT_DIR}
      dockerfile: infra/docker/node.prod.dockerfile

    restart: always
    
    networks:
      - private-nw

    depends_on:
      - db
      - redis
      


    environment:
      NODE_ENV: development
      APP_PORT: "${APP_PORT}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${DB_DATABASE}"
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_DB: "${REDIS_DB}"     

  api:

    extends:
      service: node

    build:
      args:
        - APP_NAME=web
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-api.rule=Host(`api.noder.prod`)"
      - "traefik.http.routers.node-api.entrypoints=web"
      - "traefik.http.routers.node-api.tls=false"
      - "traefik.http.services.node-api.loadbalancer.server.port=${APP_PORT}"

    command: >
      "yarn web:start"


  worker:
    extends:
      service: node

    build:
      args:
        - APP_NAME=worker

    command: >
      "yarn worker:start"

    environment:
      APP_WORKERS: "MY_QUEUE"

  
  web:
    
    extends:
      file: ./docker-compose.base.yml
      service: traefik

    # volumes:
      # - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # - "${ROOT_DIR}/infra/docker/traefik/${ENV}/certs:/etc/certs"
      # - "${ROOT_DIR}/infra/docker/traefik/${ENV}/common-middlewares.yml:/etc/traefik/dynamic/common-middlewares.yml"
      # - "${ROOT_DIR}/infra/docker/traefik/${ENV}/local-tls-store.yml:/etc/traefik/dynamic/local-tls-store.yml"

    networks:
      private-nw:
        aliases:
          - api.noder.prod
          - traefik.noder.prod

    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.noder.prod`)"
      - "traefik.http.routers.prometheus_metrics.rule=Host(`traefik.noder.prod`) && PathPrefix(`/metrics`)"
      - "traefik.enable=true"

      # - "traefik.http.routers.api.service=api@internal"
      # - "traefik.http.routers.api.entryPoints=websecure"
      # - "traefik.http.routers.api.tls=true"

      # - "traefik.http.routers.prometheus_metrics.service=prometheus@internal"
      # - "traefik.http.routers.prometheus_metrics.entryPoints=websecure"
      # - "traefik.http.routers.prometheus_metrics.tls=true"

      
    # command:
    #   - "--api.insecure=true"

      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # - "--entrypoints.web.http.middlewares=gzipResponseCompress@file"
      # - "--entrypoints.websecure.address=:443"
      # - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=180" # default: 0s (no timeout)
      # - "--entryPoints.websecure.transport.respondingTimeouts.writeTimeout=180" # default: 0s (no timeout)
      # - "--entryPoints.websecure.transport.respondingTimeouts.idleTimeout=180s" # default: 180s
      # - "--entrypoints.websecure.http.middlewares=gzipResponseCompress@file"

      # - "--providers.file.directory=/etc/traefik/dynamic"
      # - "--providers.file.watch=true"
      
    depends_on:
      - api
      - worker
      
  db:
    extends:
      file: ./docker-compose.base.yml
      service: postgres
    

    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '${DB_PORT}:${DB_PORT}'
    volumes:
      - db:/var/lib/mysql:delegated

  redis:
    extends:
      file: ./docker-compose.base.yml
      service: redis

    
    volumes:
      - redis:/data:delegated



  