version: "3"

networks:
  private-nw:

volumes: 
  db:
  redis:
  node_modules:

services:
  


  node:
    build:
      context: ${ROOT_DIR}/infra/docker
      dockerfile: node.dev.dockerfile

    restart: always
    
    networks:
      - private-nw

    depends_on:
      - db
      - redis

    environment:
      NODE_ENV: development
      APP_PORT: "${APP_PORT}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${DB_DATABASE}"
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_DB: "${REDIS_DB}"

    volumes:
      - ${ROOT_DIR}/apps:/var/app/apps:cached
      - ${ROOT_DIR}/libs:/var/app/libs:cached
      - ${ROOT_DIR}/lerna.json:/var/app/lerna.json:cached
      - ${ROOT_DIR}/package.json:/var/app/package.json:cached
      - node_modules:/var/app/node_modules:delegated

  
  api:
    extends:
      service: node
    
    command: >
      "yarn web:start:dev"

    ports:
      - "${APP_PORT}:${APP_PORT}"
      - 9229:9229


    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-api.rule=Host(`api.noder.test`)"
      - "traefik.http.routers.node-api.entrypoints=web"
      # - "traefik.http.routers.node-api.tls=true"
      - "traefik.http.services.node-api.loadbalancer.server.port=${APP_PORT}"
  worker:
    extends:
      service: node
    
    command: >
      "yarn worker:start:dev"

    environment:
      APP_WORKERS: "MY_QUEUE"

    ports:
       - 9230:9230
    
      
  db:
    extends:
      file: ./docker-compose.base.yml
      service: postgres
    
    
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '${DB_PORT}:${DB_PORT}'
    volumes:
      - db:/var/lib/mysql:delegated

  redis:
    extends:
      file: ./docker-compose.base.yml
      service: redis

    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis:/data:delegated

  web:
    extends:
      file: ./docker-compose.base.yml
      service: traefik

    
    command:
      - --log.level=DEBUG # debug while we get it working, for more levels/info see https://docs.traefik.io/observability/logs/

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=private-nw"

      - "--entrypoints.web.address=:80"
      - "--entryPoints.web.transport.respondingTimeouts.readTimeout=180s" # default: 0s (no timeout)
      - "--entryPoints.web.transport.respondingTimeouts.writeTimeout=180s" # default: 0s (no timeout)
      - "--entryPoints.web.transport.respondingTimeouts.idleTimeout=180s" # default: 180s

    ports:
      - 80:80
      - 8080:8080 # dashboard

    networks:
      private-nw:
        aliases:
          - api.noder.test
          - traefik.noder.test
    # command:
    #   - "--api.insecure=true"
    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.noder.test`)"
      - "traefik.http.routers.prometheus_metrics.rule=Host(`traefik.noder.test`) && PathPrefix(`/metrics`)"
      - "traefik.enable=true"


    depends_on:
      - api
      - worker